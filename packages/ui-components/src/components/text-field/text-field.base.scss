@import '../../assets/styles/globals';

:host {
	/**
	 * @prop --input-height-large: Text Field's large height.
	 * @prop --input-height-small: Text Field's small height.
	 * @prop --input-width: Text Field's width.
	 * @prop --input-min-width: Text Field's min width.
	 * @prop --input-max-width: Text Field's max width.

	 * @prop --text-color-label: Label Text color.
	 * @prop --text-color-icon-default: Icon color when state is default.
	 * @prop --text-color-icon-disabled: Icon color when state is disabled.
	 * @prop --text-color-icon-focused: Icon color when state is focused.
	 * @prop --text-color-action-icon-default: Action icon color when state is default.
	 * @prop --text-color-action-icon-disabled: Action icon color when state is disabled.
	 * @prop --text-color-action-icon-focused: Action icon color when state is focused.
	 * @prop --text-color-input-default: Input text color when state is default.
	 * @prop --text-color-input-disabled: Input text color when state is disabled.
	 * @prop --text-color-input-focused: Input Text color when state is focused.
	 * @prop --text-color-placeholder-default: Placeholder text color when state is default.
	 * @prop --text-color-placeholder-disabled: Placeholder text color when state is disabled.
	 * @prop --text-color-placeholder-focused: Placeholder text color when state is focused.
	 * @prop --text-color-help-text-default: Help Text color when state is default.
	 * @prop --text-color-help-text-error: Help Text color when state is invalid.

	 * @prop --border-color-default: Border color when state is default.
	 * @prop --border-color-focused: Border color when state is focused.
	 * @prop --border-color-error: Border color when state is invalid.

	 * @prop --background-color-default: Background color when state is default.
	 * @prop --background-color-disabled: Background color when state is disabled.
	 */

	--input-height-large: 36px;
	--input-height-small: 28px;
	--input-width: auto;
	--input-min-width: 140px;
	--input-max-width: 100%;

	--text-color-help-text-default: #{kv-color('text', 'step-5')};
	--text-color-help-text-error: #{kv-color('error', 'light')};

	--border-color-error: #{kv-color('error')};

	--action-icon-size: 16px;
}

kv-form-label {
	--label-color: var(--text-color-label);
}

kv-form-help-text {
	--help-text-default-color: var(--text-color-help-text-default);
	--help-text-error-color: var(--text-color-help-text-error);
}

kv-tooltip::part(container) {
	@include kv-font-span-regular();
	color: kv-color('text', 'step-4');
}

kv-tooltip::part(content) {
	width: 100%;
}

.resize-container {
	display: inline-block;
	position: relative;
	flex: 1;
	overflow: hidden;
}

.resize-input,
.resize-text {
	@include kv-font-span-regular;
	flex: 1;
	appearance: textfield;
	border: 0;
	height: 100%;
	outline: 0;
	box-sizing: border-box;
	color: var(--text-color-input-default);
	background-color: transparent;
}

.resize-text {
	padding: 0 $spacing;
	display: inline-block;
	visibility: hidden;
	white-space: pre;
}

.resize-input {
	position: absolute;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
}

input {
	@include ellipsis;

	&::placeholder {
		color: var(--text-color-placeholder-default);
	}

	&:disabled {
		color: var(--text-color-input-disabled);

		&::placeholder {
			color: var(--text-color-placeholder-disabled);
		}
	}

	&:focus,
	&.forced-focus {
		color: var(--text-color-input-focused);

		&::placeholder {
			color: var(--text-color-placeholder-focused);
		}
	}

	&:read-only:not(:disabled) {
		cursor: pointer;
	}

	&::-webkit-outer-spin-button,
	&::-webkit-inner-spin-button {
		appearance: none;
	}
}

.input-container {
	display: flex;
	width: var(--input-width);
	min-width: var(--input-min-width);
	max-width: var(--input-max-width);
	padding: 0 $spacing-2x;
	border: solid 1px var(--border-color-default);
	border-radius: 4px;
	position: relative;
	overflow: hidden;
	background-color: var(--background-color-default);
	box-sizing: border-box;

	&.invalid {
		border-color: var(--border-color-error);
	}

	&.disabled {
		border-color: var(--background-color-disabled);
		background-color: var(--background-color-disabled);
	}

	&.focused {
		&:not(.invalid) {
			border-color: var(--border-color-focused);
		}
	}

	.left-slot-container {
		kv-icon {
			--icon-color: var(--text-color-icon-default);

			&.disabled {
				--icon-color: var(--text-color-icon-disabled);
			}

			&.focus:not(.invalid) {
				--icon-color: var(--text-color-icon-focused);
			}
		}
	}

	.right-slot-container {
		kv-icon {
			--icon-color: var(--text-color-action-icon-default);

			&.disabled {
				--icon-color: var(--text-color-action-icon-disabled);
			}

			&.focus:not(.invalid) {
				--icon-color: var(--text-color-action-icon-focused);
			}
		}
	}

	.left-slot-container,
	.right-slot-container {
		height: 100%;
		display: flex;
		align-items: center;
		gap: $spacing;

		&.invalid {
			color: var(--text-color-help-text-error);
		}

		&.disabled {
			color: var(--text-color-icon-disabled);
		}

		&.focus:not(.invalid) {
			color: var(--text-color-input-focused);
		}
	}

	.left-slot-container {
		color: var(--text-color-input-default);
		overflow: hidden;
		user-select: none;

		kv-icon {
			--icon-width: 24px;
			--icon-height: 24px;
		}

		.value-prefix {
			white-space: nowrap;
			margin-right: calc(#{$spacing} / 2);

			@include kv-font-span-semibold;
		}
	}

	.right-slot-container {
		justify-content: center;

		&:not(.disabled) {
			cursor: pointer;
		}

		kv-icon {
			--icon-width: var(--action-icon-size);
			--icon-height: var(--action-icon-size);
			margin-left: $spacing;
		}
	}

	&--size-large {
		height: var(--input-height-large);
	}

	&--size-small {
		height: var(--input-height-small);

		.left-slot-container kv-icon {
			--icon-width: 16px;
			--icon-height: 16px;
		}
	}
}

.input-container-loading {
	width: 100%;
	display: flex;
	margin-top: $spacing;

	&--size-large {
		height: var(--input-height-large);
	}

	&--size-small {
		height: var(--input-height-small);
	}
}
