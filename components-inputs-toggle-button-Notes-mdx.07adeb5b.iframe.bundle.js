(self.webpackChunk_kelvininc_react_storybook=self.webpackChunk_kelvininc_react_storybook||[]).push([[691,8338],{"../../node_modules/.pnpm/@mdx-js+react@3.1.0_@types+react@18.3.12_react@18.3.1/node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{R:()=>useMDXComponents,x:()=>MDXProvider});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/.pnpm/react@18.3.1/node_modules/react/index.js");const emptyComponents={},MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext(emptyComponents);function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((function(){return"function"==typeof components?components(contextComponents):{...contextComponents,...components}}),[contextComponents,components])}function MDXProvider(properties){let allComponents;return allComponents=properties.disableParentContext?"function"==typeof properties.components?properties.components(emptyComponents):properties.components||emptyComponents:useMDXComponents(properties.components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},properties.children)}},"./src/components/inputs/toggle-button/Notes.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>MDXContent});__webpack_require__("../../node_modules/.pnpm/react@18.3.1/node_modules/react/index.js");var jsx_runtime=__webpack_require__("../../node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-runtime.js"),lib=__webpack_require__("../../node_modules/.pnpm/@mdx-js+react@3.1.0_@types+react@18.3.12_react@18.3.1/node_modules/@mdx-js/react/lib/index.js");const readme_namespaceObject="\n\x3c!-- Auto Generated Below --\x3e\n\n\n## Usage\n\n### React\n\n```tsx\nimport React from 'react';\n\nimport { KvToggleButton, EIconName } from '@kelvininc/react-ui-components/client';\n\nexport const ToggleButtonExample: React.FC = () => (\n\t<>\n\t\t{/*-- Default --*/}\n\t\t<KvToggleButton label=\"Option 1\" value=\"option-1\" />\n\n\t\t{/*-- Disabled --*/}\n\t\t<KvToggleButton label=\"Option 1\" value=\"option-1\" disabled />\n\n\t\t{/*-- Checked --*/}\n\t\t<KvToggleButton label=\"Option 1\" value=\"option-1\" checked />\n\n\t\t{/*-- With Icon --*/}\n\t\t<KvToggleButton icon={EIconName.Add} label=\"Option 1\" value=\"option-1\" />\n\n\t\t{/*-- Only Icon --*/}\n\t\t<KvToggleButton icon={EIconName.Add} value=\"option-1\" />\n\t</>\n);\n```\n\n\n\n## Properties\n\n| Property             | Attribute           | Description                                                                   | Type                                           | Default                |\n| -------------------- | ------------------- | ----------------------------------------------------------------------------- | ---------------------------------------------- | ---------------------- |\n| `checked`            | `checked`           | (optional) Sets the button as checked                                         | `boolean`                                      | `false`                |\n| `customAttributes`   | `custom-attributes` | (optional) Custom attributes to be applied to the toggle button element       | `{ [x: string]: string; }`                     | `{}`                   |\n| `disabled`           | `disabled`          | (optional) Sets the button's styling to be disabled and disables click events | `boolean`                                      | `false`                |\n| `icon`               | `icon`              | (optional) The button's icon. Only valid for toggle button icon               | `EIconName`                                    | `undefined`            |\n| `label`              | `label`             | (optional) The button's label. Only valid for toggle button text              | `string`                                       | `undefined`            |\n| `preventDefault`     | `prevent-default`   | (optional) Defines if the item click event should prevent default behaviour.  | `boolean`                                      | `false`                |\n| `size`               | `size`              | (optional) Button's size                                                      | `EComponentSize.Large \\| EComponentSize.Small` | `EComponentSize.Small` |\n| `tooltip`            | `tooltip`           | (optional) Tooltip text                                                       | `string`                                       | `undefined`            |\n| `value` _(required)_ | `value`             | (required) The value to be emitted upon click events                          | `number \\| string`                             | `undefined`            |\n| `withRadio`          | `with-radio`        | (optional) Sets if the button is a radio button                               | `boolean`                                      | `false`                |\n\n\n## Events\n\n| Event           | Description                    | Type                            |\n| --------------- | ------------------------------ | ------------------------------- |\n| `checkedChange` | Emits when a button is clicked | `CustomEvent<number \\| string>` |\n\n\n## Shadow Parts\n\n| Part              | Description                          |\n| ----------------- | ------------------------------------ |\n| `\"toggle-button\"` | The toggle action.                   |\n| `\"toggle-icon\"`   | The toggle button's icon container.  |\n| `\"toggle-label\"`  | The toggle button's label container. |\n| `\"toggle-text\"`   | The toggle button's text container.  |\n\n\n## CSS Custom Properties\n\n| Name                          | Description                                               |\n| ----------------------------- | --------------------------------------------------------- |\n| `--background-color-active`   | toggle button component's background color active.        |\n| `--background-color-default`  | toggle button component's background color default.       |\n| `--background-color-disabled` | toggle button component's background color disabled.      |\n| `--border-color-active`       | toggle button component's border color active.            |\n| `--border-color-default`      | toggle button component's border color default.           |\n| `--border-color-disabled`     | toggle button component's border color disabled.          |\n| `--button-height-large`       | toggle button component's height when size is large.      |\n| `--button-height-small`       | toggle button component's height when size is small.      |\n| `--button-icon-height-large`  | toggle button component's icon height when size is large. |\n| `--button-icon-height-small`  | toggle button component's icon height when size is small. |\n| `--button-icon-width-large`   | toggle button component's icon width when size is large.  |\n| `--button-icon-width-small`   | toggle button component's icon width when size is small.  |\n| `--button-padding-large`      | toggle button component's padding when size is large.     |\n| `--button-padding-small`      | toggle button component's padding when size is small.     |\n| `--text-color-active`         | toggle button component's text color active.              |\n| `--text-color-default`        | toggle button component's text color default.             |\n| `--text-color-disabled`       | toggle button component's text color disabled.            |\n\n\n## Dependencies\n\n### Used by\n\n - [kv-toggle-button-group](../toggle-button-group)\n - [kv-toggle-switch](../toggle-switch)\n\n### Depends on\n\n- [kv-tooltip](../tooltip)\n- [kv-radio](../radio)\n- [kv-icon](../icon)\n\n### Graph\n```mermaid\ngraph TD;\n  kv-toggle-button --\x3e kv-tooltip\n  kv-toggle-button --\x3e kv-radio\n  kv-toggle-button --\x3e kv-icon\n  kv-tooltip --\x3e kv-portal\n  kv-tooltip --\x3e kv-tooltip-text\n  kv-toggle-button-group --\x3e kv-toggle-button\n  kv-toggle-switch --\x3e kv-toggle-button\n  style kv-toggle-button fill:#f9f,stroke:#333,stroke-width:4px\n```\n\n----------------------------------------------\n\n\n";var dist=__webpack_require__("../../node_modules/.pnpm/@storybook+blocks@8.6.12_react-dom@18.3.1_react@18.3.1_storybook@8.6.12/node_modules/@storybook/blocks/dist/index.mjs"),ToggleButton_stories=__webpack_require__("./src/components/inputs/toggle-button/ToggleButton.stories.tsx");function _createMdxContent(props){return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.W8,{of:ToggleButton_stories}),"\n",(0,jsx_runtime.jsx)(dist.oz,{children:readme_namespaceObject})]})}function MDXContent(props={}){const{wrapper:MDXLayout}={...(0,lib.R)(),...props.components};return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,{...props,children:(0,jsx_runtime.jsx)(_createMdxContent,{...props})}):_createMdxContent()}},"../../node_modules/.pnpm/@storybook+blocks@8.6.12_react-dom@18.3.1_react@18.3.1_storybook@8.6.12/node_modules/@storybook/blocks/dist sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="../../node_modules/.pnpm/@storybook+blocks@8.6.12_react-dom@18.3.1_react@18.3.1_storybook@8.6.12/node_modules/@storybook/blocks/dist sync recursive",module.exports=webpackEmptyContext},"../../node_modules/.pnpm/@storybook+core@8.6.12_storybook@8.6.12/node_modules/@storybook/core/dist/components sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="../../node_modules/.pnpm/@storybook+core@8.6.12_storybook@8.6.12/node_modules/@storybook/core/dist/components sync recursive",module.exports=webpackEmptyContext},"./src/components/inputs/toggle-button/ToggleButton.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CheckedDisabledState:()=>CheckedDisabledState,CheckedState:()=>CheckedState,DefaultState:()=>DefaultState,DisabledState:()=>DisabledState,OnlyIconState:()=>OnlyIconState,TooltipState:()=>TooltipState,WithIconState:()=>WithIconState,WithRadioState:()=>WithRadioState,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-runtime.js"),_storybook_preview_api__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("storybook/internal/preview-api"),_kelvininc_react_ui_components_client__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../../packages/react-ui-components/dist/client.esm.js"),_kelvininc_react_ui_components_client__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../../packages/ui-components/dist/esm/index.js");const __WEBPACK_DEFAULT_EXPORT__={title:"Inputs/Toggle Button",component:_kelvininc_react_ui_components_client__WEBPACK_IMPORTED_MODULE_2__.CyG,render:args=>{const[{checked},updateArgs]=(0,_storybook_preview_api__WEBPACK_IMPORTED_MODULE_1__.useArgs)();return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_kelvininc_react_ui_components_client__WEBPACK_IMPORTED_MODULE_2__.CyG,{...args,onCheckedChange:()=>updateArgs({checked:!(!0===checked)})})},argTypes:{onCheckedChange:{action:"checkedChange"}}},DefaultState={args:{label:"Option 1",value:"opt1"}},CheckedState={args:{label:"Option 2",value:"opt2",checked:!0}},DisabledState={args:{label:"Option 3",value:"opt3",disabled:!0}},CheckedDisabledState={args:{label:"Option 3",value:"opt3",disabled:!0,checked:!0}},WithIconState={args:{icon:_kelvininc_react_ui_components_client__WEBPACK_IMPORTED_MODULE_3__.ib.Add,label:"Option 4",value:"opt4"}},OnlyIconState={args:{icon:_kelvininc_react_ui_components_client__WEBPACK_IMPORTED_MODULE_3__.ib.Add,value:"opt5",size:_kelvininc_react_ui_components_client__WEBPACK_IMPORTED_MODULE_3__.Cz.Large}},WithRadioState={args:{label:"Option 6",value:"opt6",withRadio:!0}},TooltipState={args:{label:"Option 6",value:"opt6",tooltip:"This is a tooltip"}},__namedExportsOrder=["DefaultState","CheckedState","DisabledState","CheckedDisabledState","WithIconState","OnlyIconState","WithRadioState","TooltipState"];DefaultState.parameters={...DefaultState.parameters,docs:{...DefaultState.parameters?.docs,source:{originalSource:'{\n  args: {\n    label: "Option 1",\n    value: "opt1"\n  }\n}',...DefaultState.parameters?.docs?.source}}},CheckedState.parameters={...CheckedState.parameters,docs:{...CheckedState.parameters?.docs,source:{originalSource:'{\n  args: {\n    label: "Option 2",\n    value: "opt2",\n    checked: true\n  }\n}',...CheckedState.parameters?.docs?.source}}},DisabledState.parameters={...DisabledState.parameters,docs:{...DisabledState.parameters?.docs,source:{originalSource:'{\n  args: {\n    label: "Option 3",\n    value: "opt3",\n    disabled: true\n  }\n}',...DisabledState.parameters?.docs?.source}}},CheckedDisabledState.parameters={...CheckedDisabledState.parameters,docs:{...CheckedDisabledState.parameters?.docs,source:{originalSource:'{\n  args: {\n    label: "Option 3",\n    value: "opt3",\n    disabled: true,\n    checked: true\n  }\n}',...CheckedDisabledState.parameters?.docs?.source}}},WithIconState.parameters={...WithIconState.parameters,docs:{...WithIconState.parameters?.docs,source:{originalSource:'{\n  args: {\n    icon: EIconName.Add,\n    label: "Option 4",\n    value: "opt4"\n  }\n}',...WithIconState.parameters?.docs?.source}}},OnlyIconState.parameters={...OnlyIconState.parameters,docs:{...OnlyIconState.parameters?.docs,source:{originalSource:'{\n  args: {\n    icon: EIconName.Add,\n    value: "opt5",\n    size: EComponentSize.Large\n  }\n}',...OnlyIconState.parameters?.docs?.source}}},WithRadioState.parameters={...WithRadioState.parameters,docs:{...WithRadioState.parameters?.docs,source:{originalSource:'{\n  args: {\n    label: "Option 6",\n    value: "opt6",\n    withRadio: true\n  }\n}',...WithRadioState.parameters?.docs?.source}}},TooltipState.parameters={...TooltipState.parameters,docs:{...TooltipState.parameters?.docs,source:{originalSource:'{\n  args: {\n    label: "Option 6",\n    value: "opt6",\n    tooltip: "This is a tooltip"\n  }\n}',...TooltipState.parameters?.docs?.source}}}}}]);